from utils import read_data, symbols, returnsimport pandas as pdimport numpy as npimport matplotlib.pylab as pltfrom datetime import datefrom statsmodels.tsa.seasonal import seasonal_decompose, STLfrom statsmodels.tsa.stattools import adfullerimport seaborn as snsfrom heavy_tails import aggregational_gaussianityfrom correlations import volatility_clustering, timescale_asymmetry, volume_volatility, leverage_effectfrom fact_analysis import gain_loss_skewdef get_all_facts():    # Facts 1, 6, and 8    df = volatility_clustering()[['abs 1lag', 'lin 1lag', 'count 0.1']]        # Fact 11    asymm_res = timescale_asymmetry()[['diff']]    df = df.join(asymm_res)        # Fact 10    vol_res = volume_volatility()[['Correlation']]    df = df.join(vol_res)        # Fact 9    lev_res = leverage_effect()[['$\tau=-1$ corr']]    df = df.join(lev_res)        # Facts 2 and 4    agg_res = aggregational_gaussianity()[['D', 'M']]    df = df.join(agg_res)        # Fact 3    gl_res = gain_loss_skew()[['price skew']]    df = df.join(gl_res)        # Order columns by fact number they correspond to    cols = ['lin 1lag', 'D', 'price skew', 'M', 'abs 1lag', 'count 0.1',             '$\tau=-1$ corr', 'Correlation', 'diff']    df = df[cols]        # Rename to be more readable    new_cols = ['C(1)', 'C^0(1)', 'Daily K', 'Monthly K', 'Price Skew', 'C^0(t) lags > 0.1',            'Leverage Effect Corr', 'Vol/Vol Corr', "Asymm Diff"]    re = dict(zip(cols, new_cols))        df.rename(columns=re, inplace=True)        # Print the summarized results    print(df.to_string())        # Calculate the rankings for each fact    facts = [f"Fact #{i}" for i in [1,2,3,4,6,8,9,10,11]]    s = dict(zip(re.values(), facts))    print(s)    df.rename(columns = s, inplace=True)    print(df)        desc_cols = [f"Fact #{i}" for i in [1,2,6,8,9,10,11]]    asc_cols = [f"Fact #{i}" for i in [3,4]]            for col in asc_cols:        df[col] = df[col].rank(ascending=True, method='min')#.astype(str)    for col in desc_cols:        df[col] = df[col].rank(ascending=False, method='min')#.astype(str)    df['avg'] = df.mean(axis=1)    print(df.to_string())        # Plot heatmap of the rankings    sns.heatmap(df, annot=True)    get_all_facts()        